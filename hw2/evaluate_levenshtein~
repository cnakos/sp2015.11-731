#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
from collections import Counter

cost = {
    'd': 1.0,
    'i': 1.0,
    's': 1.0,
    '-': 0.0,
}

def transform(a, b):
    m = len(a) + 1
    n = len(b) + 1
    d = [[[0, '']]*n  for i in range(m)]
    for i in range(1, m):
        d[i][0] = [i*cost['d'], 'd'*i]
    for j in range(1, n):
        d[0][j] = [j*cost['i'], 'i'*j]
    for j in range(1, n):
        for i in range(1, m):
            if a[i-1] == b[j-1]:
                d[i][j] = [d[i-1][j-1][0] + cost['-'], d[i-1][j-1][1] + '-']
            else:
                del_op = [d[i-1][j][0] + cost['d'], d[i-1][j][1] + 'd']
                ins_op = [d[i][j-1][0] + cost['i'], d[i][j-1][1] + 'i']
                sub_op = [d[i-1][j-1][0] + cost['s'], d[i-1][j-1][1] + 's']
                d[i][j] = min(del_op, ins_op, sub_op)
    return d[m-1][n-1]

def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    # PEP8: use ' and not " for strings
    parser.add_argument('-i', '--input', default='data/train-test.hyp1-hyp2-ref',
            help='input file (default data/train-test.hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    parser.add_argument('-a', '--alpha', default=0.5, type=float, help='meteor weight')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        h1 = [x.lower() for x in h1]
        h2 = [x.lower() for x in h2]
        ref = [x.lower() for x in ref]
        #h1 = ' '.join(h1)
        #h2 = ' '.join(h2)
        #ref = ' '.join(ref)
        h1_val = -transform(h1, ref)[0]
        h2_val = -transform(h2, ref)[0]
        print(-1 if h1_val > h2_val else # \begin{cases}
                (0 if h1_val == h2_val
                    else 1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
